/**
 * 
 */
package com.flowers.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.flowers.bean.User;
import com.flowers.serviceimpl.UserServiceImpl;

/**
 * @author Suresh Karnati
 * UserController.java
 * v1.0
 * 
 */

@RestController
@RequestMapping("/users")
public class UserController {
	
	private final String JSONURI = "http://jsonplaceholder.typicode.com/posts";
	
	private static final Logger LOGGER = LoggerFactory.getLogger(UserServiceImpl.class);
	
	@Autowired
	private UserServiceImpl userServiceImpl;
	
	/**
	 * Reading the JSON data from JSONURI and
	 * returning the JSON response
	 * @return
	 */
	@GetMapping("/readJSONFeed")
	@ResponseBody
	public List<User> readJSON() {
		LOGGER.info("inside UserController@readJSON");
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<List<User>> response = restTemplate.exchange(JSONURI, HttpMethod.GET, null, new ParameterizedTypeReference<List<User>>(){});
		
		return userServiceImpl.readJSONFeed(response);
		
	}
	
	@GetMapping("/getuniqueusers")
	@ResponseBody
	public List<User> getUniqueUsers() {
		LOGGER.info("inside UserController@getUniqueUsers");
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<List<User>> response = restTemplate.exchange(JSONURI, HttpMethod.GET, null, new ParameterizedTypeReference<List<User>>(){});
		
		return userServiceImpl.getUniqueUsers(response);
		 
	}
	
	@GetMapping("/getsize")
	@ResponseBody
	public Integer getEndPointSize() {
		LOGGER.info("inside UserController@getEndPointSize");
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<List<User>> response = restTemplate.exchange(JSONURI, HttpMethod.GET, null, new ParameterizedTypeReference<List<User>>(){});
		
		return userServiceImpl.getEndPointSize(response);

	}
	
	@GetMapping("/update")
	@ResponseBody
	public List<User> modify() {
		LOGGER.info("inside UserController@modify");
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<List<User>> response = restTemplate.exchange(JSONURI, HttpMethod.GET, null, new ParameterizedTypeReference<List<User>>(){});
		
		return userServiceImpl.getUniqueUsers(response, User user);
		 
	}

}
